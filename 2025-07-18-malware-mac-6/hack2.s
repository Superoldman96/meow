; macOS ARM64: execve("/bin/zsh", ["-c", "touch /tmp/meow.txt"], NULL)

.global _start

.section __TEXT,__text

.align 2
_start:
  ; set up pointer to "/bin/zsh"
  adrp    x0, fname@page          ; x0 = page address of fname
  add     x0, x0, fname@pageoff   ; x0 = pointer to "/bin/zsh"

  ; prepare stack space for argv[] (three pointers: fname, arg1, arg2, NULL)
  sub     sp, sp, #32             ; allocate 4 * 8 bytes (32 bytes) on stack

  ; set up argv[0] = pointer to "/bin/zsh"
  adrp    x1, fname@page
  add     x1, x1, fname@pageoff
  str     x1, [sp, #0]

  ; set up argv[1] = pointer to "-c"
  adrp    x2, arg1@page
  add     x2, x2, arg1@pageoff
  str     x2, [sp, #8]

  ; set up argv[2] = pointer to "touch /tmp/meow.txt"
  adrp    x3, arg2@page
  add     x3, x3, arg2@pageoff
  str     x3, [sp, #16]

  ; set up argv[3] = NULL
  mov     x4, xzr                 ; x4 = 0
  str     x4, [sp, #24]

  ; x0: path
  ; x1: argv (pointer to argv[0])
  ; x2: envp (NULL)
  mov     x1, sp                  ; x1 = pointer to argv[]
  mov     x2, xzr                 ; x2 = NULL

  ; prepare execve syscall number for macOS (0x200003b)
  movz    x16, #0x3b
  movk    x16, #0x2000, lsl #16

  ; syscall: execve("/bin/zsh", argv, NULL)
  svc     #0x80

  ; if execve fails, exit(1)
  mov     x0, #1
  movz    x16, #0x1
  movk    x16, #0x2000, lsl #16
  svc     #0x80

; ---- data section
.align 2
fname:
  .asciz "/bin/zsh"
.align 2
arg1:
  .asciz "-c"
.align 2
arg2:
  .asciz "touch /tmp/meow.txt"
